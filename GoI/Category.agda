module GoI.Category where

open import GoI.Types
open import GoI.Base hiding (g)
open import GoI.Product

record Category (o โ : Level) : Set (suc (o โ โ)) where
  infixr 9 _โ_
  field
    obj : Set o
    hom : obj โ obj โ Set โ
    id  : {a : obj} โ hom a a
    _โ_ : {a b c : obj} โ hom b c โ hom a b โ hom a c

  op : Category o โ
  op = record { obj = obj
              ; hom = ฮป a b โ hom b a
              ; id = id
              ; _โ_ = ฮป g f โ f โ g
              }

record Functor {o o' โ โ' : Level} (C : Category o โ) (D : Category o' โ') : Set (o โ o' โ โ โ โ') where
  private module C = Category C
  private module D = Category D
  field
    Fobj : C.obj โ D.obj
    Fhom : {a b : C.obj} โ C.hom a b โ D.hom (Fobj a) (Fobj b)

module Product where
  open Category
  _*_ : โ {o o' โ โ'} โ Category o โ โ Category o' โ' โ Category (o โ o') (โ โ โ')
  C * D = record { obj = obj C ร obj D
                 ; hom = ฮป { (ca , da) (cb , db) โ hom C ca cb ร hom D da db }
                 ; id = ฮป { {c , d} โ id C {c} , id D {d} }
                 ; _โ_ = ฮป { (fc , gc) (fd , gd) โ (_โ_ C fc fd) , (_โ_ D gc gd) }
                 }

record Monoidal (o โ : Level) (C : Category o โ) : Set (o โ โ) where
  private module C = Category C
  open C
  open Product
  field
    โ : Functor (C * C) C
    ๐ : obj
  private module F = Functor โ
  open F
  infixr 9 _โ_
  _โ_ : obj โ obj โ obj
  _โ_ = ฮป a b โ Fobj (a , b)

record Traced (o โ : Level) (C : Category o โ) (M : Monoidal o โ C) : Set (o โ โ) where
  private module C = Category C
  open C
  private module M = Monoidal M
  open M hiding (โ)
  field
    tr : โ {a b c : obj} โ hom (a โ c) (b โ c) โ hom a b

record Compact (o โ : Level) (C : Category o โ) (M : Monoidal o โ C) : Set (o โ โ) where
  private module C = Category C
  open C
  private module M = Monoidal M
  open M hiding (โ)
  infixr 9 _*
  field
    _* : obj โ obj

โ : โ {โ} โ Category (suc โ) (suc โ)
โ {โ} = record { obj = Set โ
                ; hom = ฮป i o โ R i o
                ; id  = idแตฃ
                ; _โ_ = ฮป g f โ f >> g
                }

โ-+ : โ {โ} โ Monoidal (suc โ) (suc โ) โ
โ-+ = record { โ = record { Fobj = ฮป { (a , b) โ a + b }
                           ; Fhom = ฮป { (f , g) โ f ** g }
                           }
              ; ๐ = โฅ
              }

โ-+-trace : โ {โ} โ Traced (suc โ) (suc โ) โ โ-+
โ-+-trace = record { tr = trace }

โ-ร : โ {โ} โ Monoidal (suc โ) (suc โ) โ
โ-ร = record { โ = record { Fobj = ฮป { (a , b) โ a ร b }
                           ; Fhom = ฮป { (f , g) โ f *** g }
                           }
              ; ๐ = โค
              }

โผ : โ {โ} โ Category (suc โ) (suc โ)
โผ {โ} = record { obj = Set โ ร Set โ
                ; hom = ฮป { (a , a') (b , b') โ G a a' b b' }
                ; id = id-G
                ; _โ_ = ฮป g f โ f >>> g
                }

โผ-+ : โ {โ} โ Monoidal (suc โ) (suc โ) โผ
โผ-+ = record { โ = record { Fobj = ฮป { ((a , a') , (b , b')) โ (a + b) , (a' + b') }
                           ; Fhom = ฮป { (f , h) โ f ++ h }
                           }
              ; ๐ = โฅ , โฅ
              }

โผ-+-compact : โ {โ} โ Compact (suc โ) (suc โ) โผ โผ-+
โผ-+-compact = record { _* = ฮป { (a , a') โ (a' , a) } }

postulate _รร_ : โ {โ} {A A' B B' C C' D D' : Set โ}
               โ G A A' B B' โ G C C' D D'
               โ G (A ร C + A' ร C') (A ร C' + A' ร C)
                   (B ร D + B' ร D') (B ร D' + B' ร D)

โผ-ร : โ {โ} โ Monoidal (suc โ) (suc โ) โผ
โผ-ร = record { โ = record { Fobj = ฮป { ((a , a') , (b , b')) โ (a ร b + a' ร b') , (a ร b' + a' ร b) }
                           ; Fhom = ฮป { (f , h) โ f รร h }
                           }
              ; ๐ = โฅ , โฅ
              }
